version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ai_gatekeeper
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-this-to-a-secure-random-string-min-32-chars}
      - SECRET_KEY=${SECRET_KEY:-change-this-flask-secret-key-min-24-chars}
      - ADMIN_API_KEY=${ADMIN_API_KEY:-change-this-admin-api-key-min-32-chars}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - CHROMA_PERSIST_DIR=/app/chroma_data
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=10
      - DB_POOL_TIMEOUT=30
      - DB_POOL_RECYCLE=3600
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_started
    volumes:
      - chroma_data:/app/chroma_data
      - app_logs:/var/log/ai-gatekeeper
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ai-gatekeeper-network

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_gatekeeper
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ai-gatekeeper-network

  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ai-gatekeeper-network

  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8000:8000"
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
    volumes:
      - chroma_server_data:/chroma/chroma
    restart: unless-stopped
    networks:
      - ai-gatekeeper-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  chroma_server_data:
    driver: local
  app_logs:
    driver: local

networks:
  ai-gatekeeper-network:
    driver: bridge
