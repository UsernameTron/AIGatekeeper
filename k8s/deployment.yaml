apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-gatekeeper
  namespace: ai-gatekeeper
  labels:
    app: ai-gatekeeper
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai-gatekeeper
  template:
    metadata:
      labels:
        app: ai-gatekeeper
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/api/monitoring/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: ai-gatekeeper
        image: ai-gatekeeper:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 5000
          protocol: TCP
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-gatekeeper-secrets
              key: openai-api-key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ai-gatekeeper-secrets
              key: jwt-secret-key
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ai-gatekeeper-secrets
              key: secret-key
        - name: ADMIN_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-gatekeeper-secrets
              key: admin-api-key
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ai-gatekeeper-secrets
              key: database-url
        envFrom:
        - configMapRef:
            name: ai-gatekeeper-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/monitoring/health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: chroma-data
          mountPath: /app/chroma_data
        - name: logs
          mountPath: /var/log/ai-gatekeeper
      volumes:
      - name: chroma-data
        persistentVolumeClaim:
          claimName: chroma-pvc
      - name: logs
        emptyDir: {}
